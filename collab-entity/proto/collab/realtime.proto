syntax = "proto3";
import "collab/protocol.proto";
import "collab/common.proto";

package collab;

// Message sent over websocket to perform collab sync.
message CollabMessage {
  oneof message {
    // Initial sync on connection, originated from the client.
    InitSync client_init_sync = 1;
    // Document update sync sent by the client.
    UpdateSync client_update_sync = 2;
    // Client acknowledgement that the message has been received.
    CollabAck client_ack = 3;
    // Initial sync on connection, originated from the server.
    ServerInit server_init_sync = 4;
    // Awareness update.
    AwarenessSync awareness_sync = 5;
    // Update broadcast from the server to all subscribed clients.
    BroadcastSync server_broadcast = 6;
  }
}

// User profile change event.
message UserChange {
  // User id.
  uint64 uid = 1;
  // User name.
  optional string name = 2;
  // User email.
  optional string email = 3;
  // Metadata.
  optional string metadata = 4;
}

// Workspace member role.
enum Role {
  // Unknown role.
  ROLE_UNKNOWN = 0;
  // Owner role.
  ROLE_OWNER = 1;
  // Member role.
  ROLE_MEMBER = 2;
  // Guest role.
  ROLE_GUEST = 3;
}

// Workspace member.
message WorkspaceMember {
  // Member's user name
  string name = 1;
  // Member's email
  string email = 2;
  // Member's role
  Role role = 3;
  // Member's avatar URL
  optional string avatar_url = 4;
}

// Workspace member change event.
message WorkspaceMemberChange {
  // List of new members added to the workspace
  repeated WorkspaceMember added = 1;
  // List of members in the workspace with updated profile
  repeated WorkspaceMember updated = 2;
  // List of members removed from the workspace
  repeated WorkspaceMember removed = 3;
}

// Notification on workspace members and user profile related changes.
message UserMessage {
  oneof message {
    // User profile change event.
    UserChange profile_change = 1;
    // Workspace member change event.
    WorkspaceMemberChange workspace_member_change = 2;
  }
}

// Rate limit exceeded notification.
message RateLimit {
  uint32 limit = 1;
}

// Connection kick off from the server.
message KickOff {}

// There's already an existing websocket connection from the client.
message DuplicateConnection {}

// Notification on system related events, such as rate limit exceeded and duplicated connection.
message SystemMessage {
  oneof message {
    // Rate limit exceeded notification.
    RateLimit rate_limit = 1;
    // Kick off notification.
    KickOff kick_off = 2;
    // There's already an existing websocket connection from the client.
    DuplicateConnection duplicate_connection = 3;
  }
}

// Periodic collab state checker. Not implemented at the moment.
message CollabStateCheck {
  // Collab origin.
  CollabOrigin origin = 1;
  // Object id.
  string object_id = 2;
  // Message id.
  uint64 msg_id = 3;
}

// Collab message originating from the client.
message ClientCollabMessage {
  oneof message {
    // Initial sync on connection.
    ClientInitSync client_init_sync = 1;
    // Document update sync.
    ClientUpdateSync client_update_sync = 2;
    // Updates received from the server during initial sync.
    ServerInit server_init_sync = 3;
    // Awareness update sync.
    UpdateSync client_awareness_sync = 4;
    // Periodic collab state checker.
    CollabStateCheck client_collab_state_check = 5;
  }
}

// Client collab messages in the form of list. To be deprecated.
message ClientCollabMessageCollectionV1 {
  repeated ClientCollabMessage messages = 1;
}

// Client collab messages in the form of map, with the object id as key.
message ClientCollabMessageCollectionV2 {
  map<string, ClientCollabMessage> messages = 1;
}

// Server collab messages in the form of list.
message ServerCollabMessageCollection {
  repeated CollabMessage messages = 1;
}

// Realtime message sent over websocket
message RealtimeMessage {
  oneof message {
    // Collab message to perform document and awareness sync.
    CollabMessage collab = 1;
    // Notification on workspace members and user profile related changes.
    UserMessage user = 2;
    // Notification on system related events, such as rate limit exceeded and duplicated connection.
    SystemMessage system = 3;
    // Collab messages in the form of list. To be deprecated.
    ClientCollabMessageCollectionV1 client_collab_v1 = 4;
    // Collab messages in the form of map, with the object id as key.
    ClientCollabMessageCollectionV2 client_collab_v2 = 5;
    ServerCollabMessageCollection server = 6;
  }
}