[tasks.run_coverage]
run_task = { name = [
  "run_rustlib_coverage_tests",
  "get_lcov_report",
  "clean_profraw_files",
] }
script_runner = "@shell"


[tasks.get_lcov_report]
cwd = ".."
description = "Generates `lcov` report for `collab`"
script_runner = "@shell"
script = '''
  echo Getting 'lcov' results for 'collab'
  grcov . \
  --binary-path target/debug/deps \
  --source-dir . \
  --output-type lcov \
  --branch \
  --ignore-not-existing \
  --log-level WARN \
  --output-path target/coverage.lcov

  echo "--- Done! Generated 'target/coverage.lcov' for collab."
'''


[tasks.run_rustlib_coverage_tests]
cwd = ".."
description = "Run tests with coverage instrumentation"
script_runner = "@shell"
script = '''
  echo --- Running coverage tests ---

  CARGO_INCREMENTAL=0 \
  RUSTFLAGS='-C instrument-coverage' \
  LLVM_PROFILE_FILE='prof-%p-%m.profraw' \
  cargo test
'''

[tasks.check_grcov]
description = "Check if `grcov` is installled"
script_runner = "@shell"
script = '''
export PATH=$PATH:"$HOME/.cargo/bin/"
if command -v grcov > /dev/null; then
  echo "Found 'grcov' executable."
else
  echo "[!] Could not find 'grcov' executable."
  echo "[!] Please install 'grcov' by running 'cargo install grcov'."
  echo "[!] You may also need to install 'llvm-tools-preview' using 'rustup component add llvm-tools-preview'."
  echo "[!] If installed, check if 'grcov' is in PATH."
  echo "[!] Exiting..."
  exit -1
fi
'''

[tasks.clean_profraw_files]
description = "Cleans profraw files that are created by `cargo test`"
script_runner = "@duckscript"
script = ["""
  profs = glob_array ./**/*.profraw
  for prof in ${profs}
    full_path = canonicalize ${prof}
    rm ${full_path}
  end
  """]

[config]
default_to_workspace = false
#on_error_task = "catch"

#[tasks.catch]
#run_task = { name = ["clean_profraw_files"] }

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[tasks.wasm_build]
script_runner = "bash"
script = [
  """
  #!/bin/bash
  BASE_DIR=$(pwd)
  crates=("collab" "collab-document" "collab-folder" "collab-user" "collab-plugins")

  # Iterate over each crate and build it
  for crate in "${crates[@]}"; do
    echo "ðŸ”¥ðŸ”¥ðŸ”¥  Building $crate with wasm-pack..."

    # Navigate to the crate directory
    cd "$BASE_DIR/$crate" || { echo "Failed to enter directory $crate"; exit 1; }

    # Build the crate
    wasm-pack build || { echo "Build failed for $crate"; exit 1; }
  done
  """
]

[tasks.wasm_test]
script_runner = "bash"
script = [
  """
  #!/bin/bash
  BASE_DIR=$(pwd)
  crates=("collab-plugins")

  # Iterate over each crate and build it
  for crate in "${crates[@]}"; do
    echo "ðŸ”¥ðŸ”¥ðŸ”¥  Running $crate tests with wasm-pack..."

    # Navigate to the crate directory
    cd "$BASE_DIR/$crate" || { echo "Failed to enter directory $crate"; exit 1; }

    # Build the crate
    wasm-pack test --headless --firefox
  done
  """
]
